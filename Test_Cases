//Case 1
const mutex = make_mutex();

go(() => {lock(mutex); unlock(mutex);});

//Case 2
const mutex = make_mutex();
let x = 0;

go(() => {
                            lock(mutex);
                            x = x + 1;
                            unlock(mutex);

                         },
                  () => {
                            lock(mutex);
                            x = x - 1;
                            unlock(mutex);

                         });

wait(50);

display(x);

//Case 3

const mutex = make_mutex();
let x = 0;

go(() => {
    for(let i = 0; i < 40; i=i+1) {
        lock(mutex);
        x = x + 1;
        display(x);
        unlock(mutex);
    }

},
() => {
    for(let j = 0; j < 40; j=j+1) {
        lock(mutex);
        x = x - 1;
        display(x);
        unlock(mutex);
    }
}
);

wait(500);

//Case 4

const channel = make_channel();

go(() => { write(channel, 15); display(read(channel)); },
                  () => { write(channel, 10); display(read(channel)); },
                  () => { write(channel, 5); display(read(channel)); }
                  );

wait(100);


//Case 5

const channel = make_channel();

go(() => { display(read(channel)); },
                  () => { write(channel, 15); },
                  () => { display(read(channel)); },
                  () => { write(channel, 10); },
                  () => { display(read(channel)); },
                  () => { write(channel, 5); });


wait(100);

//Case 6

const channel = make_channel();

go(() => { display("A"); display("A"); display("A");},
                  () => { display("B"); display("B"); display("B");},
                  () => { display("C"); display("C"); display("C");}
                  );

display("1...");
display("2...");
display("END");

//Case 7

const channel = make_channel();

for(let i = 0; i < 60; i=i+1) {
    go(() => { write(channel, 1); },
                  () => { display(read(channel)); },
                  () => { write(channel, 2); },
                  () => { display(read(channel)); });
}

//Case 8

const channel = make_channel();

go(() => { write(channel, "test");}
                  );

display(read(channel));

//Case 9

const channel1 = make_channel();
const channel2 = make_channel();
const channel3 = make_channel();

go(() => { write(channel1, read(channel2));},
                  () => { write(channel2, read(channel3));},
                  () => { write(channel3, 1);}
                  );

display(read(channel1));

//Case 10

const channel1 = make_channel();
const channel2 = make_channel();

go(() => { write(channel1, x => (write(channel2, x)));}
                  );

const fun = read(channel1);

fun(10);
display(read(channel2));